# Generated from proto.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,253,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,
        1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
        1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,
        14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,
        19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,
        25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,
        31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,4,33,207,
        8,33,11,33,12,33,208,1,34,4,34,212,8,34,11,34,12,34,213,1,34,1,34,
        5,34,218,8,34,10,34,12,34,221,9,34,1,34,1,34,4,34,225,8,34,11,34,
        12,34,226,3,34,229,8,34,1,35,1,35,1,35,1,35,5,35,235,8,35,10,35,
        12,35,238,9,35,1,35,1,35,1,36,4,36,243,8,36,11,36,12,36,244,1,37,
        4,37,248,8,37,11,37,12,37,249,1,37,1,37,0,0,38,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
        1,0,4,1,0,48,57,3,0,10,10,13,13,34,34,1,0,97,122,3,0,9,10,13,13,
        32,32,261,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,80,1,
        0,0,0,5,85,1,0,0,0,7,91,1,0,0,0,9,97,1,0,0,0,11,106,1,0,0,0,13,112,
        1,0,0,0,15,116,1,0,0,0,17,121,1,0,0,0,19,128,1,0,0,0,21,136,1,0,
        0,0,23,146,1,0,0,0,25,149,1,0,0,0,27,152,1,0,0,0,29,155,1,0,0,0,
        31,158,1,0,0,0,33,160,1,0,0,0,35,162,1,0,0,0,37,165,1,0,0,0,39,168,
        1,0,0,0,41,170,1,0,0,0,43,172,1,0,0,0,45,174,1,0,0,0,47,176,1,0,
        0,0,49,178,1,0,0,0,51,180,1,0,0,0,53,182,1,0,0,0,55,184,1,0,0,0,
        57,186,1,0,0,0,59,188,1,0,0,0,61,190,1,0,0,0,63,194,1,0,0,0,65,199,
        1,0,0,0,67,206,1,0,0,0,69,228,1,0,0,0,71,230,1,0,0,0,73,242,1,0,
        0,0,75,247,1,0,0,0,77,78,5,105,0,0,78,79,5,102,0,0,79,2,1,0,0,0,
        80,81,5,101,0,0,81,82,5,108,0,0,82,83,5,115,0,0,83,84,5,101,0,0,
        84,4,1,0,0,0,85,86,5,101,0,0,86,87,5,110,0,0,87,88,5,100,0,0,88,
        89,5,105,0,0,89,90,5,102,0,0,90,6,1,0,0,0,91,92,5,119,0,0,92,93,
        5,104,0,0,93,94,5,105,0,0,94,95,5,108,0,0,95,96,5,101,0,0,96,8,1,
        0,0,0,97,98,5,101,0,0,98,99,5,110,0,0,99,100,5,100,0,0,100,101,5,
        119,0,0,101,102,5,104,0,0,102,103,5,105,0,0,103,104,5,108,0,0,104,
        105,5,101,0,0,105,10,1,0,0,0,106,107,5,112,0,0,107,108,5,114,0,0,
        108,109,5,105,0,0,109,110,5,110,0,0,110,111,5,116,0,0,111,12,1,0,
        0,0,112,113,5,118,0,0,113,114,5,97,0,0,114,115,5,108,0,0,115,14,
        1,0,0,0,116,117,5,102,0,0,117,118,5,117,0,0,118,119,5,110,0,0,119,
        120,5,99,0,0,120,16,1,0,0,0,121,122,5,114,0,0,122,123,5,101,0,0,
        123,124,5,116,0,0,124,125,5,117,0,0,125,126,5,114,0,0,126,127,5,
        110,0,0,127,18,1,0,0,0,128,129,5,101,0,0,129,130,5,110,0,0,130,131,
        5,100,0,0,131,132,5,102,0,0,132,133,5,117,0,0,133,134,5,110,0,0,
        134,135,5,99,0,0,135,20,1,0,0,0,136,137,5,115,0,0,137,138,5,97,0,
        0,138,139,5,118,0,0,139,140,5,101,0,0,140,141,5,108,0,0,141,142,
        5,105,0,0,142,143,5,110,0,0,143,144,5,101,0,0,144,145,5,115,0,0,
        145,22,1,0,0,0,146,147,5,124,0,0,147,148,5,124,0,0,148,24,1,0,0,
        0,149,150,5,38,0,0,150,151,5,38,0,0,151,26,1,0,0,0,152,153,5,61,
        0,0,153,154,5,61,0,0,154,28,1,0,0,0,155,156,5,33,0,0,156,157,5,61,
        0,0,157,30,1,0,0,0,158,159,5,62,0,0,159,32,1,0,0,0,160,161,5,60,
        0,0,161,34,1,0,0,0,162,163,5,62,0,0,163,164,5,61,0,0,164,36,1,0,
        0,0,165,166,5,60,0,0,166,167,5,61,0,0,167,38,1,0,0,0,168,169,5,43,
        0,0,169,40,1,0,0,0,170,171,5,45,0,0,171,42,1,0,0,0,172,173,5,42,
        0,0,173,44,1,0,0,0,174,175,5,47,0,0,175,46,1,0,0,0,176,177,5,37,
        0,0,177,48,1,0,0,0,178,179,5,33,0,0,179,50,1,0,0,0,180,181,5,59,
        0,0,181,52,1,0,0,0,182,183,5,44,0,0,183,54,1,0,0,0,184,185,5,40,
        0,0,185,56,1,0,0,0,186,187,5,41,0,0,187,58,1,0,0,0,188,189,5,61,
        0,0,189,60,1,0,0,0,190,191,5,110,0,0,191,192,5,105,0,0,192,193,5,
        108,0,0,193,62,1,0,0,0,194,195,5,116,0,0,195,196,5,114,0,0,196,197,
        5,117,0,0,197,198,5,101,0,0,198,64,1,0,0,0,199,200,5,102,0,0,200,
        201,5,97,0,0,201,202,5,108,0,0,202,203,5,115,0,0,203,204,5,101,0,
        0,204,66,1,0,0,0,205,207,7,0,0,0,206,205,1,0,0,0,207,208,1,0,0,0,
        208,206,1,0,0,0,208,209,1,0,0,0,209,68,1,0,0,0,210,212,7,0,0,0,211,
        210,1,0,0,0,212,213,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,
        215,1,0,0,0,215,219,5,46,0,0,216,218,7,0,0,0,217,216,1,0,0,0,218,
        221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,229,1,0,0,0,221,
        219,1,0,0,0,222,224,5,46,0,0,223,225,7,0,0,0,224,223,1,0,0,0,225,
        226,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,229,1,0,0,0,228,
        211,1,0,0,0,228,222,1,0,0,0,229,70,1,0,0,0,230,236,5,34,0,0,231,
        235,8,1,0,0,232,233,5,34,0,0,233,235,5,34,0,0,234,231,1,0,0,0,234,
        232,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,
        239,1,0,0,0,238,236,1,0,0,0,239,240,5,34,0,0,240,72,1,0,0,0,241,
        243,7,2,0,0,242,241,1,0,0,0,243,244,1,0,0,0,244,242,1,0,0,0,244,
        245,1,0,0,0,245,74,1,0,0,0,246,248,7,3,0,0,247,246,1,0,0,0,248,249,
        1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,251,1,0,0,0,251,252,
        6,37,0,0,252,76,1,0,0,0,10,0,208,213,219,226,228,234,236,244,249,
        1,6,0,0
    ]

class protoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    ENDIF = 3
    WHILE = 4
    ENDWHILE = 5
    PRINT = 6
    VAL = 7
    FUNC = 8
    RETURN = 9
    ENDFUNC = 10
    SAVELINES = 11
    OR = 12
    AND = 13
    EQ = 14
    NEQ = 15
    GT = 16
    LT = 17
    GTEQ = 18
    LTEQ = 19
    PLUS = 20
    MINUS = 21
    MULT = 22
    DIV = 23
    MOD = 24
    NOT = 25
    SEMICOLON = 26
    COMMA = 27
    LPAREN = 28
    RPAREN = 29
    ASSIGN = 30
    NIL = 31
    TRUE = 32
    FALSE = 33
    INTEGER = 34
    FLOAT = 35
    STRING = 36
    ID = 37
    WS = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'endif'", "'while'", "'endwhile'", "'print'", 
            "'val'", "'func'", "'return'", "'endfunc'", "'savelines'", "'||'", 
            "'&&'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'!'", "';'", "','", "'('", "')'", 
            "'='", "'nil'", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "ENDIF", "WHILE", "ENDWHILE", "PRINT", "VAL", 
            "FUNC", "RETURN", "ENDFUNC", "SAVELINES", "OR", "AND", "EQ", 
            "NEQ", "GT", "LT", "GTEQ", "LTEQ", "PLUS", "MINUS", "MULT", 
            "DIV", "MOD", "NOT", "SEMICOLON", "COMMA", "LPAREN", "RPAREN", 
            "ASSIGN", "NIL", "TRUE", "FALSE", "INTEGER", "FLOAT", "STRING", 
            "ID", "WS" ]

    ruleNames = [ "IF", "ELSE", "ENDIF", "WHILE", "ENDWHILE", "PRINT", "VAL", 
                  "FUNC", "RETURN", "ENDFUNC", "SAVELINES", "OR", "AND", 
                  "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", "PLUS", "MINUS", 
                  "MULT", "DIV", "MOD", "NOT", "SEMICOLON", "COMMA", "LPAREN", 
                  "RPAREN", "ASSIGN", "NIL", "TRUE", "FALSE", "INTEGER", 
                  "FLOAT", "STRING", "ID", "WS" ]

    grammarFileName = "proto.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


